% Produced by CVXGEN, 2017-02-21 01:47:42 -0500.
% CVXGEN is Copyright (C) 2006-2012 Jacob Mattingley, jem@cvxgen.com.
% The code in this file is Copyright (C) 2006-2012 Jacob Mattingley.
% CVXGEN, or solvers produced by CVXGEN, cannot be used for commercial
% applications without prior written permission from Jacob Mattingley.

% Filename: cvxsolve.m.
% Description: Solution file, via cvx, for use with sample.m.
function [vars, status] = cvxsolve(params, settings)
CA = params.CA;
if isfield(params, 'Ip_1')
  Ip_1 = params.Ip_1;
elseif isfield(params, 'Ip')
  Ip_1 = params.Ip{1};
else
  error 'could not find Ip_1'
end
if isfield(params, 'Ip_2')
  Ip_2 = params.Ip_2;
elseif isfield(params, 'Ip')
  Ip_2 = params.Ip{2};
else
  error 'could not find Ip_2'
end
if isfield(params, 'Ip_3')
  Ip_3 = params.Ip_3;
elseif isfield(params, 'Ip')
  Ip_3 = params.Ip{3};
else
  error 'could not find Ip_3'
end
if isfield(params, 'Ip_4')
  Ip_4 = params.Ip_4;
elseif isfield(params, 'Ip')
  Ip_4 = params.Ip{4};
else
  error 'could not find Ip_4'
end
if isfield(params, 'Ip_5')
  Ip_5 = params.Ip_5;
elseif isfield(params, 'Ip')
  Ip_5 = params.Ip{5};
else
  error 'could not find Ip_5'
end
YBu = params.YBu;
cvx_begin
  % Caution: automatically generated by cvxgen. May be incorrect.
  variable x(5, 1);

  minimize(norm(Ip_1*(YBu - CA*x), 1) + norm(Ip_2*(YBu - CA*x), 1) + norm(Ip_3*(YBu - CA*x), 1) + norm(Ip_4*(YBu - CA*x), 1) + norm(Ip_5*(YBu - CA*x), 1));
cvx_end
vars.x = x;
status.cvx_status = cvx_status;
% Provide a drop-in replacement for csolve.
status.optval = cvx_optval;
status.converged = strcmp(cvx_status, 'Solved');
